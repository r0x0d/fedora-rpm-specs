# Generated by go2rpm 1.14.0 (and then modified for go-vendor-tools)

# https://github.com/inspektor-gadget/inspektor-gadget
# https://github.com/microsoft/azurelinux/tree/3.0/SPECS/ig
%global goipath         github.com/inspektor-gadget/inspektor-gadget
Version:                0.36.0

%gometa -L -f

Name:           inspektor-gadget
Release:        %autorelease
Summary:        Tools and framework for data collection and system inspection using eBPF
# Validated by trivy
License:        Apache-2.0 AND BSD-2-Clause AND BSD-3-Clause AND GPL-2.0-only WITH Linux-syscall-note AND ISC AND MIT AND MPL-2.0
URL:            %{gourl}

%global _description %{expand:
Inspektor Gadget is a collection of tools (or gadgets) to debug and inspect
Kubernetes resources and applications.
It manages the packaging, deployment and execution of eBPF programs in a
Kubernetes cluster, including many based on BCC tools, as well as some
developed specifically for use in Inspektor Gadget.
It automatically maps low-level kernel primitives to high-level Kubernetes
resources, making it easier and quicker to find the relevant information.

This package contains ig, the local CLI flavor of Inspektor Gadget.
}

# spectool -g golang-github-inspektor-gadget.spec
Source0:        %{gosource}
# go_vendor_archive create golang-github-inspektor-gadget.spec 
Source1:        %{archivename}-vendor.tar.xz
# Fix for trivy being unable to detect some licenses
# go_vendor_license --config go-vendor-tools.toml explicit -f LICENSE-bpf.txt "GPL-2.0-only WITH Linux-syscall-note"
# go_vendor_license --config go-vendor-tools.toml explicit -f vendor/github.com/go-errors/errors/LICENSE.MIT MIT
# go_vendor_license --config go-vendor-tools.toml explicit -f vendor/github.com/google/shlex/COPYING Apache-2.0
# go_vendor_license --config go-vendor-tools.toml explicit -f vendor/github.com/BurntSushi/toml/COPYING MIT
Source2:        go-vendor-tools.toml

BuildRequires:  go-vendor-tools

%description
%{_description}

%prep
%goprep -A
# Required to unpack vendor on top of main
%setup -q -T -D -a1 %{forgesetupargs}
%autopatch -p1

%generate_buildrequires
%go_vendor_license_buildrequires -c %{SOURCE2}

%build
# By default github.com/inspektor-gadget/inspektor-gadget/version is included as a target, instead we need to define our own.
# Wiping out currentgoldflags eliminates that.
%global currentgoldflags ""
export GO_LDFLAGS="-X %{goipath}/internal/version.version=v%{version} \
  -X %{goipath}/cmd/common/image.builderImage=ghcr.io/inspektor-gadget/ebpf-builder:v%{version}"
export GO_BUILDTAGS="netgo"
go build %{gobuildflags} -o %{gobuilddir}/bin/ig %{goipath}/cmd/ig

%install
%go_vendor_license_install -c %{SOURCE2}

mkdir -p "%{buildroot}/%{_bindir}"
install -D -m0755 %{gobuilddir}/bin/ig %{buildroot}/%{_bindir}

%check
%go_vendor_license_check -c %{SOURCE2}

set -e
set -o pipefail

# Inspektor Gadget provides unit tests but they rely on several components which
# are not present in the chroot used to build and test the package, among
# others:
# * runc: https://github.com/inspektor-gadget/inspektor-gadget/blob/3c8d1455525b/pkg/container-hook/tracer.go#L302
# * dockerd: https://github.com/inspektor-gadget/inspektor-gadget/blob/3c8d1455525b/pkg/container-utils/testutils/docker.go#L67
# Even if we recreate a proper testing environment, we will still have problems
# as, for example, the path tested will be inside the chroot while ig reports
# the full path from host point of view.
# For all these reasons, we will skip the unit tests and rather run a small
# integration test.
# Moreover, Inspektor Gadget CI covers Azure Linux extensively:
# https://github.com/inspektor-gadget/inspektor-gadget/pull/1186/commits/066bf618d158
if [ -d /sys/kernel/debug/tracing ]; then
  sleep inf &
  sleep_pid=$!
  ./bin/build/ig snapshot process --host | grep -qP "sleep\s+${sleep_pid}"
  kill $sleep_pid
else
  echo "Skipping ig check as prerequisites are not satisfied in the chroot"
fi

%files -f %{go_vendor_license_filelist}
%{_bindir}/ig

%changelog
%autochangelog

