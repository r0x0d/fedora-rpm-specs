# Generated by go2rpm 1.14.0.post0
%bcond check 1

# https://github.com/containernetworking/plugins
%global goipath         github.com/containernetworking/plugins
Version:                1.6.1

%gometa -L -f

%global common_description %{expand:
Reference and example networking plugins, maintained by the CNI team.}

Name:           containernetworking-plugins
Release:        %autorelease
Summary:        Reference and example networking plugins, maintained by the CNI team

# Generated by go-vendor-tools
License:        Apache-2.0 AND BSD-2-Clause AND BSD-3-Clause AND MIT
URL:            %{gourl}
Source0:        %{gosource}
# Generated by go-vendor-tools
Source1:        %{archivename}-vendor.tar.bz2
Source2:        go-vendor-tools.toml

ExclusiveArch: %{golang_arches}
BuildRequires:  go-vendor-tools
BuildRequires:  golang >= 1.23
BuildRequires:  systemd-devel
BuildRequires:  go-rpm-macros
BuildRequires:  go-md2man

Requires:       systemd

Obsoletes:      containernetworking-cni < 0.7.1-2
Provides:       containernetworking-cni = %{version}-%{release}
Provides:       kubernetes-cni
Provides:       container-network-stack = 1

%description
%{common_description}
The CNI (Container Network Interface) project consists of a specification
and libraries for writing plugins to configure network interfaces in Linux
containers, along with a number of supported plugins. CNI concerns itself
only with network connectivity of containers and removing allocated resources
when the container is deleted.

%prep
%goprep -A
%setup -q -T -D -a1 %{forgesetupargs}

%generate_buildrequires
%go_vendor_license_buildrequires -c %{S:2}

# Use correct paths in cni-dhcp unitfiles
# sed -i 's/\/opt\/cni\/bin/\%%{_libexecdir}\/cni/' plugins/ipam/dhcp/systemd/cni-dhcp.service
sed -i 's/\/opt\/cni\/bin/\%{_prefix}\/libexec\/cni/' plugins/ipam/dhcp/systemd/cni-dhcp.service

# remove MS Windows specific plugins
rm -rf plugins/main/windows

%build
for cmd in \
   plugins/ipam/dhcp \
   plugins/ipam/host-local \
   plugins/ipam/static \
   plugins/main/bridge \
   plugins/main/dummy \
   plugins/main/host-device \
   plugins/main/ipvlan \
   plugins/main/loopback \
   plugins/main/macvlan \
   plugins/main/ptp \
   plugins/main/tap \
   plugins/main/vlan \
   plugins/meta/bandwidth \
   plugins/meta/firewall \
   plugins/meta/portmap \
   plugins/meta/sbr \
   plugins/meta/tuning \
   plugins/meta/vrf \
   plugins/sample; do
  %gobuild -o %{gobuilddir}/bin/$(basename $cmd) %{goipath}/$cmd
done

%install
%go_vendor_license_install -c %{S:2}
install -m 0755 -vd                     %{buildroot}%{_libexecdir}/cni
install -m 0755 -vp %{gobuilddir}/bin/* %{buildroot}/%{_libexecdir}/cni/

install -dp %{buildroot}%{_unitdir}
install -p plugins/ipam/dhcp/systemd/cni-dhcp.service %{buildroot}%{_unitdir}
install -p plugins/ipam/dhcp/systemd/cni-dhcp.socket  %{buildroot}%{_unitdir}

%check
%go_vendor_license_check -c %{S:2}
%if %{with check}
# plugins/main/windows - MS Windows plugins
# plugins/ipam/dhcp - network integration
# pkg/ip - integration
# pkg/ipam - network integration
# pkg/ns - network namespace integration
%gocheck -d plugins/main/windows -t plugins -d pkg/ip -d pkg/ipam -d pkg/ns -t pkg/utils
%endif

%files -f %{go_vendor_license_filelist}
%license vendor/modules.txt
%doc CONTRIBUTING.md OWNERS.md README.md RELEASING.md

%dir %{_libexecdir}/cni
%{_libexecdir}/cni/*
%{_unitdir}/cni-dhcp.service
%{_unitdir}/cni-dhcp.socket

%changelog
%autochangelog
