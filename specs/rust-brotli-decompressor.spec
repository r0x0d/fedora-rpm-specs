# Generated by rust2rpm 27
%bcond check 1
%global debug_package %{nil}

# At the default debug level 2, compiling the crate for testing in %%check
# takes an hour and a half or much more; at level 1, it takes seconds to
# minutes.
%global rustflags_debuginfo 1

# prevent executables from being installed
%global cargo_install_bin 0

%global crate brotli-decompressor

Name:           rust-brotli-decompressor
Version:        4.0.2
Release:        %autorelease
Summary:        Brotli decompressor with no_std support

License:        BSD-3-Clause AND MIT
URL:            https://crates.io/crates/brotli-decompressor
Source:         %{crates_source}
# Manually created patch for downstream crate metadata changes
# * Adjust license from BSD-3-Clause/MIT to BSD-3-Clause AND MIT; see
#   https://github.com/dropbox/rust-brotli-decompressor/issues/9,
#   https://github.com/dropbox/rust-brotli-decompressor/pull/32, and Patch10.See
#   also the similar PR https://github.com/dropbox/rust-brotli/pull/218, which
#   was merged, but note https://github.com/dropbox/rust-brotli/pull/218: we
#   should be attentive to future improvements or corrections to the license
#   texts.
# * Loosen the version bound on alloc-no-stdlib (stricter than necessary):
#   https://github.com/dropbox/rust-brotli-decompressor/pull/34
Patch:          brotli-decompressor-fix-metadata.diff
# * Adjust license to reflect a MIT-only source, and add a MIT license file
#   (https://github.com/dropbox/rust-brotli-decompressor/pull/32), without the
#   changes to Cargo.toml (which are applied manually to the normalized
#   Cargo.toml in the crate).
Patch10:        brotli-decompressor-4.0.1-license-accuracy.patch

BuildRequires:  cargo-rpm-macros >= 26

%global _description %{expand:
A brotli decompressor that with an interface avoiding the rust stdlib.
This makes it suitable for embedded devices and kernels. It is designed
with a pluggable allocator so that the standard lib's allocator may be
employed. The default build also includes a stdlib allocator and stream
interface. Disable this with --features=no-stdlib. Alternatively,
--features=unsafe turns off array bounds checks and memory
initialization but provides a safe interface for the caller.  Without
adding the --features=unsafe argument, all included code is safe. For
compression in addition to this library, download
https://github.com/dropbox/rust-brotli.}

%description %{_description}

%package        devel
Summary:        %{summary}
BuildArch:      noarch

%description    devel %{_description}

This package contains library source intended for building other packages which
use the "%{crate}" crate.

%files          devel
%license %{crate_instdir}/LICENSE.BSD-3-Clause
%license %{crate_instdir}/LICENSE.MIT
%doc %{crate_instdir}/README.md
%{crate_instdir}/

%package     -n %{name}+default-devel
Summary:        %{summary}
BuildArch:      noarch

%description -n %{name}+default-devel %{_description}

This package contains library source intended for building other packages which
use the "default" feature of the "%{crate}" crate.

%files       -n %{name}+default-devel
%ghost %{crate_instdir}/Cargo.toml

%package     -n %{name}+alloc-stdlib-devel
Summary:        %{summary}
BuildArch:      noarch

%description -n %{name}+alloc-stdlib-devel %{_description}

This package contains library source intended for building other packages which
use the "alloc-stdlib" feature of the "%{crate}" crate.

%files       -n %{name}+alloc-stdlib-devel
%ghost %{crate_instdir}/Cargo.toml

%package     -n %{name}+disable-timer-devel
Summary:        %{summary}
BuildArch:      noarch

%description -n %{name}+disable-timer-devel %{_description}

This package contains library source intended for building other packages which
use the "disable-timer" feature of the "%{crate}" crate.

%files       -n %{name}+disable-timer-devel
%ghost %{crate_instdir}/Cargo.toml

%package     -n %{name}+ffi-api-devel
Summary:        %{summary}
BuildArch:      noarch

%description -n %{name}+ffi-api-devel %{_description}

This package contains library source intended for building other packages which
use the "ffi-api" feature of the "%{crate}" crate.

%files       -n %{name}+ffi-api-devel
%ghost %{crate_instdir}/Cargo.toml

%package     -n %{name}+pass-through-ffi-panics-devel
Summary:        %{summary}
BuildArch:      noarch

%description -n %{name}+pass-through-ffi-panics-devel %{_description}

This package contains library source intended for building other packages which
use the "pass-through-ffi-panics" feature of the "%{crate}" crate.

%files       -n %{name}+pass-through-ffi-panics-devel
%ghost %{crate_instdir}/Cargo.toml

%package     -n %{name}+seccomp-devel
Summary:        %{summary}
BuildArch:      noarch

%description -n %{name}+seccomp-devel %{_description}

This package contains library source intended for building other packages which
use the "seccomp" feature of the "%{crate}" crate.

%files       -n %{name}+seccomp-devel
%ghost %{crate_instdir}/Cargo.toml

%package     -n %{name}+std-devel
Summary:        %{summary}
BuildArch:      noarch

%description -n %{name}+std-devel %{_description}

This package contains library source intended for building other packages which
use the "std" feature of the "%{crate}" crate.

%files       -n %{name}+std-devel
%ghost %{crate_instdir}/Cargo.toml

%package     -n %{name}+unsafe-devel
Summary:        %{summary}
BuildArch:      noarch

%description -n %{name}+unsafe-devel %{_description}

This package contains library source intended for building other packages which
use the "unsafe" feature of the "%{crate}" crate.

%files       -n %{name}+unsafe-devel
%ghost %{crate_instdir}/Cargo.toml

%prep
%autosetup -n %{crate}-%{version} -p1
# Remove executable flag from .rs files
# https://github.com/dropbox/rust-brotli-decompressor/pull/33
find src -type f -executable -exec chmod -x '{}' '+'
# Integration tests require a test data corpus that (1) exists only in git, not
# in the released crates, so would require a separate source archive, and more
# seriously, (2) contains content under various and unspecified licenses.
rm src/bin/integration_tests.rs
sed -r -i 's@^mod integration_tests@// &@' src/bin/brotli-decompressor.rs
# This test also requires the data corpus.
sed -r -i 's@.*test_alice@// Always false:\n#[cfg(any())]\n&@' src/bin/tests.rs
%cargo_prep

%generate_buildrequires
%cargo_generate_buildrequires

%build
%cargo_build

%install
%cargo_install

%if %{with check}
%check
%cargo_test
%endif

%changelog
%autochangelog
