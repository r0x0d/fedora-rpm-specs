# Generated by rust2rpm 27
%bcond check 1
%global debug_package %{nil}

%global crate procfs

Name:           rust-procfs
Version:        0.17.0
Release:        %autorelease
Summary:        Interface to the linux procfs pseudo-filesystem

License:        MIT OR Apache-2.0
URL:            https://crates.io/crates/procfs
Source:         %{crates_source}
# Manually created patch for downstream crate metadata changes
# * Remove benchmark-only dev-dependency on criterion
# * Remove dev-dependency on procinfo (missing, depends on outdated nom 2)
# * Remove dev-dependency on failure (unmaintained upstream, depends on outdated
#   synstructure 0.12 via failure_derive)
Patch:          procfs-fix-metadata.diff
# * Omit the test that would introduce the procinfo dev-dependency
Patch10:        procfs-0.17.0-no-test_procinfo.patch
# * Omit the test that would introduce the failure dev-dependency
Patch11:        procfs-0.17.0-no-test_failure.patch
# * Work around 32/64 bit mismatch
# * https://github.com/eminence/procfs/pull/326
# * Exported with git format-patch --relative.
Patch12:        0001-Work-around-32-64-bit-mismatch.patch

BuildRequires:  cargo-rpm-macros >= 24

%global _description %{expand:
Interface to the linux procfs pseudo-filesystem.}

%description %{_description}

%package        devel
Summary:        %{summary}
BuildArch:      noarch

%description    devel %{_description}

This package contains library source intended for building other packages which
use the "%{crate}" crate.

%files          devel
%license %{crate_instdir}/COPYRIGHT.txt
%license %{crate_instdir}/LICENSE-APACHE
%license %{crate_instdir}/LICENSE-MIT
%doc %{crate_instdir}/README.md
%{crate_instdir}/

%package     -n %{name}+default-devel
Summary:        %{summary}
BuildArch:      noarch

%description -n %{name}+default-devel %{_description}

This package contains library source intended for building other packages which
use the "default" feature of the "%{crate}" crate.

%files       -n %{name}+default-devel
%ghost %{crate_instdir}/Cargo.toml

%package     -n %{name}+backtrace-devel
Summary:        %{summary}
BuildArch:      noarch

%description -n %{name}+backtrace-devel %{_description}

This package contains library source intended for building other packages which
use the "backtrace" feature of the "%{crate}" crate.

%files       -n %{name}+backtrace-devel
%ghost %{crate_instdir}/Cargo.toml

%package     -n %{name}+chrono-devel
Summary:        %{summary}
BuildArch:      noarch

%description -n %{name}+chrono-devel %{_description}

This package contains library source intended for building other packages which
use the "chrono" feature of the "%{crate}" crate.

%files       -n %{name}+chrono-devel
%ghost %{crate_instdir}/Cargo.toml

%package     -n %{name}+flate2-devel
Summary:        %{summary}
BuildArch:      noarch

%description -n %{name}+flate2-devel %{_description}

This package contains library source intended for building other packages which
use the "flate2" feature of the "%{crate}" crate.

%files       -n %{name}+flate2-devel
%ghost %{crate_instdir}/Cargo.toml

%package     -n %{name}+serde-devel
Summary:        %{summary}
BuildArch:      noarch

%description -n %{name}+serde-devel %{_description}

This package contains library source intended for building other packages which
use the "serde" feature of the "%{crate}" crate.

%files       -n %{name}+serde-devel
%ghost %{crate_instdir}/Cargo.toml

%package     -n %{name}+serde1-devel
Summary:        %{summary}
BuildArch:      noarch

%description -n %{name}+serde1-devel %{_description}

This package contains library source intended for building other packages which
use the "serde1" feature of the "%{crate}" crate.

%files       -n %{name}+serde1-devel
%ghost %{crate_instdir}/Cargo.toml

%prep
%autosetup -n %{crate}-%{version} -p1
%cargo_prep

%generate_buildrequires
%cargo_generate_buildrequires

%build
%cargo_build

%install
%cargo_install

%if %{with check}
%check
# * Some tests must be run serially:
#   https://github.com/eminence/procfs/issues/322
skip="${skip-} --skip _runsinglethread"
# * thread 'sys::kernel::random::tests::test_write_wakeup_threshold' panicked at
#   src/sys/kernel/random.rs:94:24: test_write_wakeup_threshold error: Io(Os {
#   code: 30, kind: ReadOnlyFilesystem, message: "Read-only file system" },
#   Some("/proc/sys/kernel/random/write_wakeup_threshold")). This fails in a git
#   checkout if it is running in a mock chroot.
skip="${skip-} --skip sys::kernel::random::tests::test_write_wakeup_threshold"
%ifnarch x86_64 %{ix86}
# * On non-x86 architectures, test_cpuinfo fails:
#   https://github.com/eminence/procfs/issues/323
skip="${skip-} --skip tests::test_cpuinfo"
%endif
%ifarch s390x
# * On s390x, test_kernel_stat and test_meminfo fail:
#   https://github.com/eminence/procfs/issues/324
skip="${skip-} --skip tests::test_kernel_stat"
skip="${skip-} --skip tests::test_meminfo"
%endif

%{cargo_test -- -- ${skip-}}
# Run the tests that must be run serially:
%{cargo_test -- -- _runsinglethread --test-threads 1}
%endif

%changelog
%autochangelog
